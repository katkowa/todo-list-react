{"version":3,"sources":["Form/index.js","TasksList/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","placeholder","onChange","target","TasksList","tasks","isDoneHide","removeTask","toggleTaskDone","map","task","key","id","done","onClick","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","getInitializeTasksList","localStorage","getItem","JSON","parse","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6142a0a9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n    }\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                value={newTaskContent}\r\n                className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <button className=\"form__button\">Dodaj zadanie</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst TasksList = ({ tasks, isDoneHide, removeTask, toggleTaskDone }) => (\r\n  <ul className=\"tasksList\">\r\n    {tasks.map(task => (\r\n      <li\r\n        key={task.id}\r\n        className={`tasksList__item${isDoneHide && task.done ? \" tasksList__item--hidden\" : \"\"}`}\r\n      >\r\n        <button\r\n          onClick={() => toggleTaskDone(task.id)}\r\n          className=\"tasksList__button tasksList__button--toggleDone\"\r\n        >\r\n          {task.done ? \"âœ”\" : \"\"}\r\n        </button>\r\n        <span className=\r\n          {`tasksList__taskContent${task.done ? \" tasksList__taskContent--done\" : \"\"}`}\r\n        >\r\n          {task.content}\r\n        </span>\r\n        <button\r\n          onClick={() => removeTask(task.id)}\r\n          className=\"tasksList__button tasksList__button--remove\"\r\n        >\r\n          ðŸ—‘\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default TasksList;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, isDoneHide, toggleHideDone, setAllDone }) => (\r\n    tasks.length > 0 && (\r\n        <div className=\"buttonsContainer\">\r\n            <button\r\n                onClick={toggleHideDone}\r\n                className=\"buttonsContainer__button\"\r\n            >\r\n                {isDoneHide ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n            </button>\r\n            <button\r\n                onClick={setAllDone}\r\n                className=\"buttonsContainer__button\"\r\n                disabled={tasks.every(({ done }) => done)}\r\n            >\r\n                UkoÅ„cz wszystkie\r\n            </button>\r\n        </div>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <section className=\"section\">\r\n            <header className=\"section__header\">\r\n                <h2 className=\"section__title\">{title}</h2>\r\n                {extraHeaderContent}\r\n            </header>\r\n\r\n            <div className=\"section__body\">\r\n                {body}\r\n            </div>\r\n        </section>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({children}) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React, { useState, useEffect } from 'react';\nimport Form from \"./Form\";\nimport TasksList from \"./TasksList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from './Header';\nimport Container from \"./Container\";\n\nconst getInitializeTasksList = () => {\n  return localStorage.getItem(\"tasks\")\n    ? JSON.parse(localStorage.getItem(\"tasks\"))\n    : [];\n}\n\nfunction App() {\n  const [isDoneHide, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(getInitializeTasksList);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDone = () => {\n    setHideDone(isDoneHide => !isDoneHide);\n  }\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  }\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }));\n\n  }\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task =>\n      ({\n        ...task, done: true\n      })));\n  }\n\n  const addNewTask = (content) => {\n    setTasks(tasks =>\n      [\n        ...tasks,\n        {\n          content,\n          done: false,\n          id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n        }\n      ]);\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header title=\"Lista zadaÅ„\" />\n\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form addNewTask={addNewTask} />}\n        />\n\n        <Section\n          title=\"Lista zadaÅ„\"\n          extraHeaderContent={\n            <Buttons\n              tasks={tasks}\n              isDoneHide={isDoneHide}\n              toggleHideDone={toggleHideDone}\n              setAllDone={setAllDone}\n            />\n          }\n          body={\n            <TasksList\n              tasks={tasks}\n              isDoneHide={isDoneHide}\n              removeTask={removeTask}\n              toggleTaskDone={toggleTaskDone}\n            />\n          }\n        />\n\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}