{"version":3,"sources":["Form/styled.js","Form/index.js","TasksList/styled.js","TasksList/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","App.js","useTasks.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","form","Input","input","Button","button","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trim","current","focus","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","toggleDone","remove","Content","span","done","TasksList","tasks","isDoneHide","removeTask","toggleTaskDone","map","task","key","id","onClick","content","ButtonsContainer","div","Buttons","toggleHideDone","setAllDone","length","disabled","every","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","Main","main","Container","children","App","setHideDone","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","filter","useTasks","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c7d8c0fb.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: #fff;\r\n    background-color: teal;\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n    transition: 1s;\r\n\r\n    &:hover {\r\n    background-color: #009696;\r\n    transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n    background-color: #00afaf;\r\n    }\r\n`;","import React, { useState, useRef } from \"react\";\r\nimport { Wrapper, Input, Button } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    }\r\n\r\n    return (\r\n        <Wrapper onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    align-items: center;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 25px;\r\n    height: 25px;\r\n    border-radius: 0;\r\n    border: 1px solid #ddd;\r\n    transition: 0.5s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: green;\r\n        color: #fff;\r\n\r\n        &:hover {\r\n            background-color: #00a100;\r\n        }\r\n\r\n        &:active {\r\n            background-color: #03b803;\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: crimson;\r\n        color: #fff;\r\n        text-align: center;\r\n        line-height: 22px;\r\n\r\n        &:hover {\r\n            background-color: hsl(348, 83%, 60%);\r\n        }\r\n\r\n        &:active {\r\n            background-color: #df667e;\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;","import React from \"react\";\r\nimport { List, Item, Button, Content } from \"./styled\";\r\n\r\nconst TasksList = ({ tasks, isDoneHide, removeTask, toggleTaskDone }) => (\r\n  <List>\r\n    {tasks.map(task => (\r\n      <Item\r\n        key={task.id}\r\n        hidden={isDoneHide && task.done}\r\n      >\r\n        <Button\r\n          toggleDone\r\n          onClick={() => toggleTaskDone(task.id)}\r\n        >\r\n          {task.done ? \"âœ”\" : \"\"}\r\n        </Button>\r\n        <Content done={task.done}>\r\n          {task.content}\r\n        </Content>\r\n        <Button\r\n          remove\r\n          onClick={() => removeTask(task.id)}\r\n        >\r\n          ðŸ—‘\r\n        </Button>\r\n      </Item>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nexport default TasksList;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    @media(max-width: 767px) {\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n        grid-gap: 20px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: 0;\r\n    background-color: inherit;\r\n    color: teal;\r\n    transition: 0.5s;\r\n\r\n    &:disabled {\r\n        color: #ddd;\r\n    }\r\n\r\n    &:hover:enabled {\r\n    color: hsl(180, 100%, 35%);\r\n    }\r\n\r\n    &:active:enabled {\r\n    color: hsl(180, 100%, 45%);\r\n    }\r\n\r\n    &:focus {\r\n    outline: 0;\r\n    }\r\n`;","import React from \"react\";\r\nimport { ButtonsContainer, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, isDoneHide, toggleHideDone, setAllDone }) => (\r\n    tasks.length > 0 && (\r\n        <ButtonsContainer>\r\n            <Button\r\n                onClick={toggleHideDone}\r\n            >\r\n                {isDoneHide ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n            </Button>\r\n            <Button\r\n                onClick={setAllDone}\r\n                disabled={tasks.every(({ done }) => done)}\r\n            >\r\n                UkoÅ„cz wszystkie\r\n            </Button>\r\n        </ButtonsContainer>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background-color: #fff;\r\n    margin: 5px 0;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 2px solid #ddd;\r\n    display: grid;\r\n    grid-gap: 20px;\r\n    grid-template-columns: 1fr auto;\r\n    align-items: baseline;\r\n    padding: 20px;\r\n\r\n    @media(max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0;\r\n    font-size: 20px;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    height: 100vh;\r\n    padding: 20px;\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import React, { useState } from 'react';\nimport Form from \"./Form\";\nimport TasksList from \"./TasksList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from './Header';\nimport Container from \"./Container\";\nimport { useTasks } from \"./useTasks\";\n\nfunction App() {\n  const [isDoneHide, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(isDoneHide => !isDoneHide);\n  }\n\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask,\n  } = useTasks();\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header title=\"Lista zadaÅ„\" />\n\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form addNewTask={addNewTask} />}\n        />\n\n        <Section\n          title=\"Lista zadaÅ„\"\n          extraHeaderContent={\n            <Buttons\n              tasks={tasks}\n              isDoneHide={isDoneHide}\n              toggleHideDone={toggleHideDone}\n              setAllDone={setAllDone}\n            />\n          }\n          body={\n            <TasksList\n              tasks={tasks}\n              isDoneHide={isDoneHide}\n              removeTask={removeTask}\n              toggleTaskDone={toggleTaskDone}\n            />\n          }\n        />\n\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useTasks = () => {\r\n    const getInitializeTasksList = () => {\r\n        return localStorage.getItem(\"tasks\")\r\n            ? JSON.parse(localStorage.getItem(\"tasks\"))\r\n            : [];\r\n    }\r\n\r\n    const [tasks, setTasks] = useState(getInitializeTasksList);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    }\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            }\r\n            return task;\r\n        }));\r\n    }\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task =>\r\n            ({\r\n                ...task, done: true\r\n            })));\r\n    }\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks =>\r\n            [\r\n                ...tasks,\r\n                {\r\n                    content,\r\n                    done: false,\r\n                    id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n                }\r\n            ]);\r\n    }\r\n\r\n    return {\r\n        tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask,\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}