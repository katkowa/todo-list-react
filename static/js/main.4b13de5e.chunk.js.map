{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","serviceWorker.js","theme.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","StyledForm","styled","form","breakpoint","mobileMax","Input","input","Button","button","white","teal","alto","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","task","id","done","removeTask","splice","setAllDone","forEach","actions","selectTasks","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","newTaskContentTrimmed","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","toggleDone","green","remove","crimson","Content","span","TasksList","useSelector","map","key","onClick","ButtonsContainer","div","Buttons","length","disabled","every","Wrapper","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","Main","main","Container","children","Tasks","className","Boolean","window","location","hostname","match","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ggBAEO,IAAMA,EAAcC,YAAH,KAWI,qBAAGC,MAAkBC,MAAMC,W,upBCXhD,IAAMC,EAAaC,IAAOC,KAAV,KAKC,qBAAGL,MAAkBM,WAAWC,aAK3CC,EAAQJ,IAAOK,MAAV,KAILC,EAASN,IAAOO,OAAV,KACN,qBAAGX,MAAkBC,MAAMW,SAChB,qBAAGZ,MAAkBC,MAAMY,QAE3B,qBAAGb,MAAkBC,MAAMa,Q,OClB7CC,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVC,MAAO,GACPC,UAAU,GAEdC,SAAU,CACNC,QAAS,cAA6B,IAA1BH,EAAyB,EAAzBA,MAAWI,EAAc,EAAdA,QACnBJ,EAAMK,KAAKD,IAEfE,eAAgB,SAAAC,GACZA,EAAMN,UAAYM,EAAMN,UAE5BO,eAAgB,cAA6B,IAA1BR,EAAyB,EAAzBA,MAAWI,EAAc,EAAdA,QACpBK,EAAQT,EAAMU,WAAU,SAAAC,GAAI,OAAIA,EAAKC,KAAOR,KAClDJ,EAAMS,GAAOI,MAAQb,EAAMS,GAAOI,MAEtCC,WAAY,cAA6B,IAA1Bd,EAAyB,EAAzBA,MAAWI,EAAc,EAAdA,QAChBK,EAAQT,EAAMU,WAAU,SAAAC,GAAI,OAAIA,EAAKC,KAAOR,KAClDJ,EAAMe,OAAON,EAAO,IAExBO,WAAY,YAAe,EAAZhB,MACLiB,SAAQ,SAAAN,GAAI,OAAIA,EAAKE,MAAO,S,EAKqCjB,EAAWsB,QAA/Ef,E,EAAAA,QAASG,E,EAAAA,eAAgBE,E,EAAAA,eAAgBM,E,EAAAA,WAAYE,E,EAAAA,WACvDG,EAAc,SAAAZ,GAAK,OAAIA,EAAMP,OAC3BJ,IAAf,QCYewB,EArCF,WAAO,IAAD,EAC6BC,mBAAS,IADtC,mBACRC,EADQ,KACQC,EADR,KAETC,EAAWC,iBAAO,MAElBC,EAAWC,cAoBjB,OACI,kBAAC3C,EAAD,CAAY4C,SAnBK,SAACC,GAClBA,EAAMC,iBAEN,IAAMC,EAAwBT,EAAeU,OACxCD,IAILL,EAASvB,EAAQ,CACb8B,QAASF,EACTlB,MAAM,EACND,GAAIsB,iBAGRX,EAAkB,IAClBC,EAASW,QAAQC,WAKb,kBAAC/C,EAAD,CACIgD,IAAKb,EACLc,MAAOhB,EACPiB,YAAY,wBACZC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBlB,EAAkBkB,EAAOH,UAEvD,kBAAC/C,EAAD,wB,+7CCpCL,IAAMmD,EAAOzD,IAAO0D,GAAV,KAMJC,EAAO3D,IAAO4D,GAAV,KAMc,qBAAGhE,MAAkBC,MAAMa,QAEpD,qBAAGmD,QAAuBC,YAAJ,QAKfxD,EAASN,IAAOO,OAAV,KAIK,qBAAGX,MAAkBC,MAAMa,QAG7C,qBAAGqD,YAA+BD,YAAJ,KACR,qBAAGlE,MAAkBC,MAAMmE,SACtC,qBAAGpE,MAAkBC,MAAMW,YAWtC,qBAAGyD,QAAuBH,YAAJ,KACA,qBAAGlE,MAAkBC,MAAMqE,WACtC,qBAAGtE,MAAkBC,MAAMW,YAc/B2D,EAAUnE,IAAOoE,KAAV,KACd,qBAAGxC,MAAmBkC,YAAJ,QCrBTO,EAhCG,WAAO,IAAD,EACMC,YAAYpC,GAAhCnB,EADc,EACdA,MAAOC,EADO,EACPA,SACTyB,EAAWC,cAEjB,OACE,kBAACe,EAAD,KACG1C,EAAMwD,KAAI,SAAA7C,GAAI,OACb,kBAACiC,EAAD,CACEa,IAAK9C,EAAKC,GACVkC,OAAQ7C,GAAYU,EAAKE,MAEzB,kBAAC,EAAD,CACEmC,YAAU,EACVU,QAAS,kBAAMhC,EAASlB,EAAeG,EAAKC,OAE3CD,EAAKE,KAAO,SAAM,IAErB,kBAACuC,EAAD,CAASvC,KAAMF,EAAKE,MACjBF,EAAKsB,SAER,kBAAC,EAAD,CACEiB,QAAM,EACNQ,QAAS,kBAAMhC,EAASZ,EAAWH,EAAKC,OAF1C,sB,mkBCvBH,IAAM+C,EAAmB1E,IAAO2E,IAAV,KACL,qBAAG/E,MAAkBM,WAAWC,aAO3CG,EAASN,IAAOO,OAAV,KAGN,qBAAGX,MAAkBC,MAAMY,QAIvB,qBAAGb,MAAkBC,MAAMa,QCS7BkE,EArBC,WAAO,IAAD,EACUN,YAAYpC,GAAhCnB,EADU,EACVA,MAAOC,EADG,EACHA,SACTyB,EAAWC,cAEjB,OACI3B,EAAM8D,OAAS,GACX,kBAACH,EAAD,KACI,kBAAC,EAAD,CAAQD,QAAS,kBAAMhC,EAASpB,OAC3BL,EAAW,aAAU,QAD1B,mBAGA,kBAAC,EAAD,CACIyD,QAAS,kBAAMhC,EAASV,MACxB+C,SAAU/D,EAAMgE,OAAM,qBAAGnD,SAF7B,2B,opBCbT,IAAMoD,EAAUhF,IAAOiF,QAAV,KACI,qBAAGrF,MAAkBC,MAAMW,SAEzB,qBAAGZ,MAAkBC,MAAMa,QAGxCwE,EAASlF,IAAOmF,OAAV,KACY,qBAAGvF,MAAkBC,MAAMa,QAOlC,qBAAGd,MAAkBM,WAAWC,aAK3CiF,GAAQpF,IAAOqF,GAAV,KAKLC,GAAOtF,IAAO2E,IAAV,KCVFY,GAbC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,mBAAhB,OACZ,kBAACV,EAAD,KACI,kBAAC,EAAD,KACI,kBAACI,GAAD,KAAQI,GACPE,GAGL,kBAACJ,GAAD,KACKG,KCHEP,GANA,SAAC,GAAD,IAAEM,EAAF,EAAEA,MAAF,OACX,gCACI,4BAAKA,K,6JCFN,IAAMG,GAAO3F,IAAO4F,KAAV,MCOFC,GANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,kBAACH,GAAD,KACKG,ICyBMC,OAtBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,GAAD,KAEE,kBAAC,GAAD,CAAQR,MAAM,qBACd,kBAAC,GAAD,CACEA,MAAM,qBACNC,KAAM,kBAAC,EAAD,QAGR,kBAAC,GAAD,CACED,MAAM,mBACNE,mBAAoB,kBAAC,EAAD,MACpBD,KAAM,kBAAC,EAAD,WCnBD,qBAAM,kBAAC,GAAD,OCSDQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBC,ICGQC,eAAe,CAC1BC,QAAS,CACLxF,MAAOyF,KCKfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,IACf,kBAAC,IAAD,CAAehH,MFbA,CACjBC,MAAO,CACHY,KAAM,UACNC,KAAM,OACNZ,QAAS,OACTU,MAAO,OACPwD,MAAO,QACPE,QAAS,WAEbhE,WAAY,CACRC,UAAW,OEIX,kBAACT,EAAD,MACA,kBAACmH,GAAD,SAINC,SAASC,eAAe,SHgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4b13de5e.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        background-color: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.white};\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n    transition: 1s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"./../tasksSlice\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newTaskContentTrimmed = newTaskContent.trim();\r\n        if (!newTaskContentTrimmed) {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContentTrimmed,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    }\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    align-items: center;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 25px;\r\n    height: 25px;\r\n    border-radius: 0;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n    transition: 0.5s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n        color: ${({ theme }) => theme.color.white};\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.crimson};\r\n        color: ${({ theme }) => theme.color.white};\r\n        text-align: center;\r\n        line-height: 22px;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { List, Item, Button, Content } from \"./styled\";\r\n\r\nconst TasksList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item\r\n          key={task.id}\r\n          hidden={hideDone && task.done}\r\n        >\r\n          <Button\r\n            toggleDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>\r\n            {task.content}\r\n          </Content>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TasksList;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n        grid-gap: 20px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: 0;\r\n    background-color: inherit;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    transition: 0.5s;\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.alto};\r\n    }\r\n\r\n    &:hover:enabled {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active:enabled {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:focus {\r\n    outline: 0;\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ButtonsContainer, Button } from \"./styled\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        tasks.length > 0 && (\r\n            <ButtonsContainer>\r\n                <Button onClick={() => dispatch(toggleHideDone())} >\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                </Button>\r\n                <Button\r\n                    onClick={() => dispatch(setAllDone())}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Ukończ wszystkie\r\n                </Button>\r\n            </ButtonsContainer>\r\n        )\r\n    );\r\n}\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    margin: 5px 0;\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 2px solid ${({ theme }) => theme.color.alto};\r\n    display: grid;\r\n    grid-gap: 20px;\r\n    grid-template-columns: 1fr auto;\r\n    align-items: baseline;\r\n    padding: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0;\r\n    font-size: 20px;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    height: 100vh;\r\n    padding: 20px;\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import React from 'react';\nimport Form from \"./Form\";\nimport TasksList from \"./TasksList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from '../../common/Header';\nimport Container from \"../../common/Container\";\n\nfunction Tasks() {\n  return (\n    <div className=\"App\">\n      <Container>\n\n        <Header title=\"Lista zadań\" />\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form />}\n        />\n\n        <Section\n          title=\"Lista zadań\"\n          extraHeaderContent={<Buttons />}\n          body={<TasksList />}\n        />\n\n      </Container>\n    </div>\n  );\n}\n\nexport default Tasks;\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const theme = {\r\n    color: {\r\n        teal: \"#008080\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        green: \"green\",\r\n        crimson: \"crimson\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}